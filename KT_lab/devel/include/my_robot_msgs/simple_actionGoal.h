// Generated by gencpp from file my_robot_msgs/simple_actionGoal.msg
// DO NOT EDIT!


#ifndef MY_ROBOT_MSGS_MESSAGE_SIMPLE_ACTIONGOAL_H
#define MY_ROBOT_MSGS_MESSAGE_SIMPLE_ACTIONGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_robot_msgs
{
template <class ContainerAllocator>
struct simple_actionGoal_
{
  typedef simple_actionGoal_<ContainerAllocator> Type;

  simple_actionGoal_()
    : signal_number(0)
    , wait_duration(0.0)  {
    }
  simple_actionGoal_(const ContainerAllocator& _alloc)
    : signal_number(0)
    , wait_duration(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _signal_number_type;
  _signal_number_type signal_number;

   typedef double _wait_duration_type;
  _wait_duration_type wait_duration;





  typedef boost::shared_ptr< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct simple_actionGoal_

typedef ::my_robot_msgs::simple_actionGoal_<std::allocator<void> > simple_actionGoal;

typedef boost::shared_ptr< ::my_robot_msgs::simple_actionGoal > simple_actionGoalPtr;
typedef boost::shared_ptr< ::my_robot_msgs::simple_actionGoal const> simple_actionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_robot_msgs::simple_actionGoal_<ContainerAllocator1> & lhs, const ::my_robot_msgs::simple_actionGoal_<ContainerAllocator2> & rhs)
{
  return lhs.signal_number == rhs.signal_number &&
    lhs.wait_duration == rhs.wait_duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_robot_msgs::simple_actionGoal_<ContainerAllocator1> & lhs, const ::my_robot_msgs::simple_actionGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f51a1293efda0df42a4f882527d6005e";
  }

  static const char* value(const ::my_robot_msgs::simple_actionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf51a1293efda0df4ULL;
  static const uint64_t static_value2 = 0x2a4f882527d6005eULL;
};

template<class ContainerAllocator>
struct DataType< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_robot_msgs/simple_actionGoal";
  }

  static const char* value(const ::my_robot_msgs::simple_actionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal\n"
"int64 signal_number\n"
"float64 wait_duration\n"
;
  }

  static const char* value(const ::my_robot_msgs::simple_actionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.signal_number);
      stream.next(m.wait_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct simple_actionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_robot_msgs::simple_actionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_robot_msgs::simple_actionGoal_<ContainerAllocator>& v)
  {
    s << indent << "signal_number: ";
    Printer<int64_t>::stream(s, indent + "  ", v.signal_number);
    s << indent << "wait_duration: ";
    Printer<double>::stream(s, indent + "  ", v.wait_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ROBOT_MSGS_MESSAGE_SIMPLE_ACTIONGOAL_H
