;; Auto-generated. Do not edit!


(when (boundp 'my_robot_msgs::num_actionGoal)
  (if (not (find-package "MY_ROBOT_MSGS"))
    (make-package "MY_ROBOT_MSGS"))
  (shadow 'num_actionGoal (find-package "MY_ROBOT_MSGS")))
(unless (find-package "MY_ROBOT_MSGS::NUM_ACTIONGOAL")
  (make-package "MY_ROBOT_MSGS::NUM_ACTIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude num_actionGoal.msg.html


(defclass my_robot_msgs::num_actionGoal
  :super ros::object
  :slots (_bin_num ))

(defmethod my_robot_msgs::num_actionGoal
  (:init
   (&key
    ((:bin_num __bin_num) 0)
    )
   (send-super :init)
   (setq _bin_num (round __bin_num))
   self)
  (:bin_num
   (&optional __bin_num)
   (if __bin_num (setq _bin_num __bin_num)) _bin_num)
  (:serialization-length
   ()
   (+
    ;; int64 _bin_num
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int64 _bin_num
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _bin_num (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _bin_num) (= (length (_bin_num . bv)) 2)) ;; bignum
              (write-long (ash (elt (_bin_num . bv) 0) 0) s)
              (write-long (ash (elt (_bin_num . bv) 1) -1) s))
             ((and (class _bin_num) (= (length (_bin_num . bv)) 1)) ;; big1
              (write-long (elt (_bin_num . bv) 0) s)
              (write-long (if (>= _bin_num 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _bin_num s)(write-long (if (>= _bin_num 0) 0 #xffffffff) s)))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int64 _bin_num
#+(or :alpha :irix6 :x86_64)
      (setf _bin_num (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _bin_num (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;;
   self)
  )

(setf (get my_robot_msgs::num_actionGoal :md5sum-) "1327ba78bb595c490506018fc2008a3e")
(setf (get my_robot_msgs::num_actionGoal :datatype-) "my_robot_msgs/num_actionGoal")
(setf (get my_robot_msgs::num_actionGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal
int64 bin_num

")



(provide :my_robot_msgs/num_actionGoal "1327ba78bb595c490506018fc2008a3e")


